"use strict";(self.webpackChunkapi_based_webapp=self.webpackChunkapi_based_webapp||[]).push([[826],{421:()=>{},138:(e,t,n)=>{n.a(e,(async(e,t)=>{try{n(421);var a=n(641),s=n(259);const e="https://api.tvmaze.com/shows",i=()=>{document.getElementById("title-template").cloneNode(!0).textContent="API-based-webap"},o=async()=>{i()};window.addEventListener("load",o);const c=await a.Z.getTvShows(e);await s.Z.displayTvShows(c.list),await s.Z.addCommentEventListner(),s.Z.addModal(),t()}catch(e){t(e)}}),1)},641:(e,t,n)=>{n.d(t,{Z:()=>s});const a=class{constructor(e,t,n,a,s,i,o,c){this.id=e,this.name=t,this.type=n,this.language=a,this.genres=s,this.rating=i,this.image=o,this.summary=c}},s={getTvShows:async e=>{const t=new class{constructor(e=[]){this.list=e}push(e){this.list.push(e)}};return(await fetch(e).then((e=>e.json())).then((e=>e))).forEach((e=>{t.push(new a(e.id,e.name,e.type,e.language,e.genres[0],e.rating.average,e.image.medium,e.summary))})),t},getTvShow:async e=>{const t=await fetch(e).then((e=>e.json())).then((e=>e));return new a(t.id,t.name,t.type,t.language,t.genres[0],t.rating.average,t.image.medium,t.summary)},getlike:async e=>(await fetch(e,{method:"GET"})).json(),like:async(e,t)=>{await fetch(e,{method:"POST",body:JSON.stringify({item_id:t}),headers:{"Content-type":"application/json; charset=UTF-8"}})},getComments:async(e,t)=>{const n=new class{constructor(e=[]){this.List=e}push(e){this.List.push(e)}};try{(await fetch(`${e}?item_id=${t}`).then((e=>{if(e.ok)return e.json();throw new Error("not okay response")}))).forEach((e=>{n.push(new class{constructor(e,t,n){this.item_id=e,this.username=t,this.comment=n}}(e.item_id,e.username,e.comment))}))}catch{return n}return n},comment:async(e,t,n,a)=>(await fetch(e,{method:"POST",body:JSON.stringify({item_id:t,username:n,comment:a}),headers:{"Content-type":"application/json; charset=UTF-8"}})).status}},259:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(641);const s="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/Sff4TpvfhVNiDO6YpeWb/comments",i=document.querySelector(".flex-container"),o=document.querySelector(".modal-detail-img"),c=document.querySelector(".modal-detail-text"),r=document.querySelector(".form-add-submit"),m=async e=>{const t=await a.Z.getComments(s,e),n=document.querySelector(".modal-view-comment");document.querySelector(".comment-counter").innerHTML=`(${t.List.length})`;let i="";t.List.forEach((e=>{i+=`<textarea name="" id="" cols="50" rows="1" disabled>"${e.comment}"- ${e.username}</textarea>`})),n.innerHTML=i},d={displayTvShows:async e=>{let t="";e.forEach((e=>{t+=`\n<div class="shows">\n\n   <div class="img-container">\n     <img src="${e.image}" alt="photo">\n   </div>\n   <div id="1">\n     ${e.id}  ${e.name}\n   </div>\n   <div class="reaction">\n     <button>like</button>\n     <button class="comment" data-id="${e.id}">comment</button>\n   </div>\n</div>\n`})),i.innerHTML=t},addModal:async()=>{const e=document.getElementById("myModal"),t=document.querySelectorAll(".comment");document.querySelector(".close").addEventListener("click",(()=>{e.style.display="none"})),t.forEach((t=>{t.addEventListener("click",(async()=>{const n=t.getAttribute("data-id"),s=await a.Z.getTvShow(`https://api.tvmaze.com/shows/${n}`);await m(n),r.setAttribute("data-id",n),o.innerHTML=`<img src = ${s.image}>`,c.innerHTML=`\n<p> Name:${s.name} </p>\n<p> Language:${s.language}</p>\n<p> Type:${s.type}</p>\n<p> Gener:${s.genress}</p>\n<p> Average rating:${s.rating.average}</p>\n<P>${s.summary}</p>\n      `,e.style.display="block"}))}))},addCommentEventListner:async()=>{const e=document.querySelector(".form-add-name"),t=document.querySelector(".form-add-comment");r.addEventListener("click",(async()=>{const n=r.getAttribute("data-id");await a.Z.comment(s,n,e.value,t.value),await m(n),e.value="",t.value=""}))}}}},e=>{e(e.s=138)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,